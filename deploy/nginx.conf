map $http_x_forwarded_for $client_ip_for_rate_limit { default $binary_remote_addr; }

# Map incoming Host header to correct HTTPS host for redirects (supports 8080 -> 8443)
map $http_host $redirect_host {
    ~^(?<domain>.+):8080$  $domain:8443;
    default                $http_host;
}

# Properly map Upgrade header to Connection value so HTTP/2 frontends or certain clients
# set an appropriate Connection header when proxying WebSocket upgrades.
map $http_upgrade $connection_upgrade {
    default upgrade;
    ""      close;
}

limit_req_zone $client_ip_for_rate_limit zone=api:10m rate=10r/s;
limit_req_zone $client_ip_for_rate_limit zone=general:10m rate=1r/s;

# HTTP server - redirect to HTTPS
server {
    listen       80;
    server_name  _;
    return 301 https://$redirect_host$request_uri;
}

# HTTPS server
server {
    listen       443 ssl http2;
    server_name  _;
    # Use Docker DNS for name resolution (required to resolve 'backend' service)
    resolver 127.0.0.11 ipv6=off valid=30s;

    # SSL configuration - modern and secure
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # Modern SSL protocols and ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL session handling
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling off; # Disabled for self-signed certs
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Serve the built SPA
    root   /usr/share/nginx/html;
    index  index.html;

    # Special handling for SSH WebSocket connections - highest priority
    location ~* ^/ssh/sessions/[^/]+/attach$ {
        # No rate limiting for WebSocket connections
        
        # Use variable-based upstream so Docker DNS can re-resolve via resolver
        set $backend_upstream http://backend:8787;
        proxy_pass $backend_upstream$request_uri;
        proxy_http_version 1.1;
        
        # Essential WebSocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Preserve client information for external access
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Ssl on;
        
        # WebSocket-optimized timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 86400s; # 24 hours for long SSH sessions
        
        # Disable all buffering for real-time communication
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        
        # Enable keep-alive for external connections
        proxy_socket_keepalive on;
        
        # Add debugging headers (remove in production)
        add_header X-Debug-WebSocket "ssh-attach" always;
    }

    # Proxy API and backend-only routes to backend (exclude SPA routes like /steam, /anime, /integrations page, etc.)
    # Includes WebSocket-capable endpoints like /ssh/*
    # Note: Restrict integrations to OAuth endpoints only to avoid hijacking SPA route /integrations
    location ~* ^/(agp|dyn|integrations/oauth|api|aggregations|live-share|clips|rss-proxy|ssh|jellyseerr|jellyfin|karakeep)(/|$) {
        limit_req zone=api burst=20 nodelay;

        # Use variable-based upstream so Docker DNS can re-resolve via resolver
        set $backend_upstream http://backend:8787;
        proxy_pass $backend_upstream$request_uri;
        proxy_http_version 1.1;
        
        # WebSocket upgrade (harmless for normal HTTP; required for /ssh attach)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Preserve original host and forward auth header
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https; # Force HTTPS for backend
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Ssl on;
        proxy_set_header Authorization $http_authorization;
        
        # Critical headers for external access
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        
        # Proxy timeouts - optimized for WebSocket connections
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 3600s; # Allow long-lived websocket connections
        
        # Disable buffering for WebSocket connections to improve responsiveness
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        
        # Keep-alive settings for external connections
        proxy_socket_keepalive on;
    }

    # Cache static assets aggressively
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        try_files $uri =404;
    }

    # SPA fallback with rate limiting
    location / {
        limit_req zone=general burst=5 nodelay;
        try_files $uri /index.html;
    }

    # Health check endpoint (no rate limiting) - accessible via HTTPS
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}


